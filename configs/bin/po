#!/data/data/com.termux/files/usr/bin/bash

# Termux Process Manager with FZF
# Only shows processes owned by Termux user to avoid permission errors
# Default action: kill -9 by PID (force kill)

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Get current user
CURRENT_USER=$(whoami)

# FZF arguments for interactive selection
fzf_args=(
  --multi
  --ansi
  --header='Tab: multi-select, Enter: confirm selection, Ctrl-R: refresh'
  --header-lines=1
  --preview-label='alt-p: toggle details, alt-j/k: scroll'
  --preview-label-pos='bottom'
  --preview-window 'right:50%:wrap'
  --bind 'alt-p:toggle-preview'
  --bind 'alt-d:preview-half-page-down,alt-u:preview-half-page-up'
  --bind 'alt-k:preview-up,alt-j:preview-down'
  --bind 'ctrl-r:reload(get_processes)'
  --color 'pointer:red,marker:red,header:blue,fg+:green'
  --layout=reverse
)

# Function to show completion message
show_done() {
  echo -e "${GREEN}✓ Operation completed!${NC}"
}

# Function to get formatted process list
get_processes() {
  # Get processes only for current user, exclude grep and the script itself
  ps -u "$CURRENT_USER" -o pid,%cpu,%mem,comm | \
    grep -v "grep" | \
    grep -v "termux-process-manager" | \
    grep -v "ki.sh"
}

# Function to get detailed process info
get_process_details() {
  local pid=$1
  
  echo -e "${CYAN}═══════════════════════════════════════${NC}"
  echo -e "${YELLOW}Process Details (PID: $pid)${NC}"
  echo -e "${CYAN}═══════════════════════════════════════${NC}"
  
  # Basic info
  ps -p "$pid" -o pid,ppid,user,%cpu,%mem,vsz,rss,stat,start,time,comm 2>/dev/null
  
  echo ""
  echo -e "${GREEN}Command Line:${NC}"
  ps -p "$pid" -o args --no-headers 2>/dev/null || echo "N/A"
  
  echo ""
  echo -e "${GREEN}Status:${NC}"
  cat /proc/"$pid"/status 2>/dev/null | grep -E "^(Name|State|Pid|PPid|Uid|VmSize|VmRSS|Threads)" || echo "N/A"
  
  echo ""
  echo -e "${GREEN}File Descriptors:${NC}"
  ls -l /proc/"$pid"/fd 2>/dev/null | tail -n +2 | wc -l || echo "N/A"
  
  echo ""
  echo -e "${GREEN}Working Directory:${NC}"
  readlink /proc/"$pid"/cwd 2>/dev/null || echo "N/A"
  
  echo ""
  echo -e "${GREEN}Environment:${NC}"
  cat /proc/"$pid"/environ 2>/dev/null | tr '\0' '\n' | head -10 || echo "N/A"
}

# Export function for FZF preview
export -f get_process_details
export CYAN GREEN YELLOW NC

# Function to display menu
show_menu() {
  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
  echo -e "${YELLOW}  Termux Process Manager${NC}"
  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
  echo -e "${GREEN}a)${NC} Kill processes (kill -9)"
  echo -e "${GREEN}s)${NC} View process tree"
  echo -e "${GREEN}3)${NC} Monitor processes (live)"
  echo -e "${GREEN}4)${NC} Search processes by name"
  echo -e "${GREEN}5)${NC} Top CPU consumers"
  echo -e "${GREEN}6)${NC} Top memory consumers"
  echo -e "${GREEN}q)${NC} Exit"
  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
  echo -n "Select an option (or press Enter for kill): "
}

# Function to kill processes using kill -9 by PID
kill_processes() {
  echo -e "${YELLOW}Loading processes...${NC}"
  
  # Get process list and select with FZF
  selected=$(get_processes | fzf "${fzf_args[@]}" \
    --preview 'bash -c "get_process_details {1}"' \
    --header="Select processes to kill with kill -9 (Tab: multi-select, Enter: confirm)")
  
  if [[ -n "$selected" ]]; then
    # Extract PIDs (first column)
    pids=$(echo "$selected" | awk '{print $1}')
    
    echo ""
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}Selected processes to kill:${NC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo "$selected"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${RED}⚠ Warning: This will force kill the selected processes${NC}"
    echo -e "${YELLOW}Press Enter to kill, or Ctrl+C to cancel${NC}"
    read -r
    
    # Kill each PID
    killed_count=0
    failed_count=0
    
    for pid in $pids; do
      if kill -9 "$pid" 2>/dev/null; then
        proc_name=$(ps -p "$pid" -o comm --no-headers 2>/dev/null || echo "Unknown")
        echo -e "${GREEN}✓ Killed PID $pid ($proc_name)${NC}"
        ((killed_count++))
      else
        echo -e "${RED}✗ Failed to kill PID $pid (process may have already exited)${NC}"
        ((failed_count++))
      fi
    done
    
    echo ""
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}Successfully killed: $killed_count${NC}"
    [[ $failed_count -gt 0 ]] && echo -e "${RED}Failed: $failed_count${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    show_done
  else
    echo -e "${RED}No processes selected.${NC}"
  fi
}

# Function to view process tree
view_process_tree() {
  echo -e "${YELLOW}Process Tree (Termux processes only):${NC}"
  echo -e "${CYAN}═══════════════════════════════════════${NC}"
  
  # Use pstree if available, otherwise use ps
  if command -v pstree &> /dev/null; then
    pstree -p "$CURRENT_USER" 2>/dev/null || pstree -p "$$"
  else
    ps -u "$CURRENT_USER" -o pid,ppid,comm --forest
  fi
  
  echo -e "${CYAN}═══════════════════════════════════════${NC}"
}

# Function to monitor processes live
monitor_processes() {
  echo -e "${YELLOW}Live Process Monitor (Press Ctrl+C to exit)${NC}"
  echo -e "${CYAN}Refreshing every 2 seconds...${NC}"
  echo ""
  
  while true; do
    clear
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}Termux Process Monitor - $(date '+%Y-%m-%d %H:%M:%S')${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    get_processes
    sleep 2
  done
}

# Function to search processes
search_processes() {
  echo -n "Enter process name to search: "
  read -r search_term
  
  if [[ -n "$search_term" ]]; then
    echo -e "${YELLOW}Searching for: $search_term${NC}"
    echo -e "${CYAN}═══════════════════════════════════════${NC}"
    ps -u "$CURRENT_USER" -o pid,%cpu,%mem,comm | grep -i "$search_term" | grep -v "grep"
    echo -e "${CYAN}═══════════════════════════════════════${NC}"
  else
    echo -e "${RED}No search term provided.${NC}"
  fi
}

# Function to show top CPU consumers
top_cpu() {
  echo -e "${YELLOW}Top 10 CPU Consumers:${NC}"
  echo -e "${CYAN}═══════════════════════════════════════${NC}"
  ps -u "$CURRENT_USER" -o pid,%cpu,comm --sort=-%cpu | head -11
  echo -e "${CYAN}═══════════════════════════════════════${NC}"
}

# Function to show top memory consumers
top_memory() {
  echo -e "${YELLOW}Top 10 Memory Consumers:${NC}"
  echo -e "${CYAN}═══════════════════════════════════════${NC}"
  ps -u "$CURRENT_USER" -o pid,%mem,rss,comm --sort=-%mem | head -11
  echo -e "${CYAN}═══════════════════════════════════════${NC}"
}

# Main loop
while true; do
  show_menu
  read -r choice
  
  # Default to kill if Enter is pressed with no input
  [[ -z "$choice" ]] && choice=1
  
  case $choice in
    a)
      kill_processes
      ;;
    s)
      view_process_tree
      ;;
    3)
      monitor_processes
      ;;
    4)
      search_processes
      ;;
    5)
      top_cpu
      ;;
    6)
      top_memory
      ;;
    q)
      echo -e "${GREEN}Goodbye!${NC}"
      exit 0
      ;;
    *)
      echo -e "${RED}Invalid option. Please try again.${NC}"
      ;;
  esac
  
  echo ""
  read -p "Press Enter to continue..."
  clear
done
